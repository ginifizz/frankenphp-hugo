<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My New Hugo Site</title>
    <link>https://example.org/docs/</link>
    <description>Recent content on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://example.org/docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://example.org/docs/compile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/compile/</guid>
      <description>Compile From Sources This document explain how to create a FrankenPHP build that will load PHP as a dymanic library. This is the recommended method.
Alternatively, creating static builds is also possible.
Install PHP FrankenPHP is compatible with the PHP 8.2 and superior.
First, get the sources of PHP and extract them:
tar xf php-* cd php-*/ Then, configure PHP for your platform:
Linux ./configure \ --enable-embed \ --enable-zts \ --disable-zend-signals \ --enable-zend-max-execution-timers Finally, compile and install PHP:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/config/</guid>
      <description>Configuration FrankenPHP, Caddy as well the Mercure and Vulcain modules can be configured using the formats supported by Caddy.
In the Docker image, the Caddyfile is located at /etc/caddy/Caddyfile.
You can also configure PHP using php.ini as usual.
In the Docker image, the php.ini file is not present, you can create it or COPY manually.
If you copy php.ini from $PHP_INI_DIR/php.ini-production or $PHP_INI_DIR/php.ini-development you also must set variable variables_order = &amp;quot;EGPCS&amp;quot;, because default value for variables_order is &amp;quot;EGPCS&amp;quot; but in php.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/docker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/docker/</guid>
      <description>Building Custom Docker Image FrankenPHP Docker images are based on official PHP images. Alpine Linux and Debian variants are provided for popular architectures. Variants for PHP 8.2 and PHP 8.3 are provided. Browse tags.
How to Use The Images Create a Dockerfile in your project:
FROM dunglas/frankenphp COPY . /app/public Then, run the commands to build and run the Docker image:
$ docker build -t my-php-app . $ docker run -it --rm --name my-running-app my-php-app How to Install More PHP Extensions The docker-php-extension-installer script is provided in the base image.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/early-hints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/early-hints/</guid>
      <description>Early Hints FrankenPHP natively supports the 103 Early Hints status code. Using Early Hints can improve the load time of your web pages by 30%.
&amp;lt;?php header(&amp;#39;Link: &amp;lt;/style.css&amp;gt;; rel=preload; as=style&amp;#39;); headers_send(103); // your slow algorithms and SQL queries ðŸ¤ª echo &amp;lt;&amp;lt;&amp;lt;&amp;#39;HTML&amp;#39; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;title&amp;gt;Hello FrankenPHP&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;style.css&amp;#34;&amp;gt; HTML; Early Hints are supported both by the normal and the worker modes.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/github-actions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/github-actions/</guid>
      <description>Using GitHub Actions This repository builds and deploys the Docker image to Docker Hub on every approved pull request or on your own fork once setup.
Setting up GitHub Actions In the repository settings, under secrets, add the following secrets:
REGISTRY_LOGIN_SERVER: The docker registry to use (e.g. docker.io). REGISTRY_USERNAME: The username to use to login to the registry (e.g. dunglas). REGISTRY_PASSWORD: The password to use to login to the registry (e.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/known-issues/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/known-issues/</guid>
      <description>Known Issues Fibers Calling PHP functions and language constructs that themselves call cgo in Fibers is known to cause crashes.
This issue is being worked on by the Go project.
In the meantime, one solution is not to use constructs (like echo) and functions (like header()) that delegate to Go from inside Fibers.
This code will likely crash because it uses echo in the Fiber:
$fiber = new Fiber(function() { echo &amp;#39;In the Fiber&amp;#39;.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/laravel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/laravel/</guid>
      <description>Laravel Docker Serving a Laravel web application with FrankenPHP is as easy as mounting the project in the /app directory of the official Docker image.
Run this command from the main directory of your Laravel app:
docker run -p 443:443 -v $PWD:/app dunglas/frankenphp And enjoy!
Local Installation Alternatively, you can run your Laravel projects with FrankenPHP from your local machine:
Download the binary corresponding to your system Add the following configuration to a file named Caddyfile in the root directory of your Laravel project: { frankenphp order php_server before file_server } # The domain name of your server localhost { # Enable compression (optional) encode zstd gzip # Execute PHP files in the current directory and serve assets php_server } Start FrankenPHP from the root directory of your Laravel project: .</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/mercure/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/mercure/</guid>
      <description>Real-time FrankenPHP comes with a built-in Mercure hub! Mercure allows to push event in real-time to all the connected devices: they will receive instantly a JavaScript event.
No JS library or SDK required!
To enable the Mercure hub, update the Caddyfile as described on Mercure&amp;rsquo;s website.
To push Mercure updates from your code, we recommend the Symfony Mercure Component (you don&amp;rsquo;t need the Symfony full stack framework to use it).</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/static/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/static/</guid>
      <description>Create a Static Build Instead of using a local installation of the PHP library, it&amp;rsquo;s possible to create a static build of FrankenPHP thanks to the great static-php-cli project (despite its name, this project support all SAPIs, not only CLI).
With this method, a single, portable, binary will contain the PHP interpreter, the Caddy web server and FrankenPHP!
Linux We provide a Docker image to build a Linux static binary:</description>
    </item>
    
    <item>
      <title></title>
      <link>https://example.org/docs/worker/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://example.org/docs/worker/</guid>
      <description>Using FrankenPHP Workers Boot your application once and keep it in memory. FrankenPHP will handle incoming requests in a few milliseconds.
Custom Apps &amp;lt;?php // public/index.php // Boot your app require __DIR__.&amp;#39;/vendor/autoload.php&amp;#39;; $myApp = new \App\Kernel(); $myApp-&amp;gt;boot(); do { $running = frankenphp_handle_request(function () use ($myApp) { // Called when a request is received, // superglobals, php://input and the like are reset echo $myApp-&amp;gt;handle($_GET, $_POST, $_COOKIE, $_FILES, $_SERVER); }); // Do something after sending the HTTP response $myApp-&amp;gt;terminate(); // Call the garbage collector to reduce the chances of it being triggered in the middle of a page generation gc_collect_cycles(); } while ($running); // Cleanup $myApp-&amp;gt;shutdown(); Then, start your app and use the FRANKENPHP_CONFIG environment variable to configure your worker:</description>
    </item>
    
  </channel>
</rss>
